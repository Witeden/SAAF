import argparse
import zipfile
from bs4 import BeautifulSoup
import os

PATH_TO_REPORTS = "reports/"
PATH_TO_MALWARE = ""

TAG_HEURISTIC_RESULT = "heuristic-result"
TAG_BACKTRACK_RESULT = "backtrack-result"

def getReportName(fileName):
    try:
        report_list = os.listdir(PATH_TO_REPORTS)
        for reportName in report_list:
            if fileName in reportName :
                return reportName
    except:
        print("Error while trying to get report name for:", fileName)

def getZipDate(fileName):
    try:
        with zipfile.ZipFile(fileName) as z:
            for file in z.filelist:
                if file.filename == "AndroidManifest.xml":
                    zipDate = file.date_time[0]
                    print("zip date in AndroidManifest.xml:", zipDate)
                    return zipDate
            zipDate = z.filelist[0].date_time[0]
            print("zip date found:", zipDate)
            return zipDate
    except:
        print("Error while trying to get zip date:", fileName)

def getAnalysis(reportName):
    try:
        with open (reportName, 'r') as f:
            data = f.read()
            soup = BeautifulSoup(data, "xml")

            patterns = {}
            if soup.analysis.status.message.text != "EXECUTION_FAILED":
                patterns = getPatterns(data, TAG_BACKTRACK_RESULT)
                patterns.update(getPatterns(data, TAG_HEURISTIC_RESULT))

            print("analysis accessed")
            return soup.analysis.status.message.text, patterns
    except:
        print("Error while trying to get result analysis:", reportName)

def getPatterns(data, type):
    ## data: data from BeautifulSoup
    ## type: 'heuristic-pattern' or 'backtrack-pattern' 
    ## or:   'heuristic-result'  or 'backtrack-result'
    try:
        soup = BeautifulSoup(data, "xml")
        tags = soup.findAll(type)

        isResult = ('result' in type)
        patterns = {}
        for tag in tags:
            if isResult:
                description = tag.pattern.text.replace("<", "&lt;").replace(">", "&gt;")
            else:
                description = tag['description'].replace("<", "&lt;").replace(">", "&gt;")
            if description in patterns:
                patterns[description] += 1
                continue
            patterns[description] = 1
        return patterns
    except:
        print("Error while trying to parse data from pattern:", type)

def parse_arguments() :
    argParser = argparse.ArgumentParser()
    argParser.add_argument("-f", "--filename", default=None, type=str, description="")
    argParser.add_argument("-d", "--directory", default=None, type=str, description="")

    args = argParser.parse_args()
    return args

def main():

    # select file name
    args = parse_arguments()
    
    if args.f:
        return 1
        
 
    # generate report for file

    # extract finished from file

    # unzip file for the date


    return 0

if __name__ == "__main__":
    main()